// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: analytics.proto

package api

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CRCStatus int32

const (
	CRCStatus_MISSING CRCStatus = 0
	CRCStatus_OK      CRCStatus = 1
	CRCStatus_FAIL    CRCStatus = 2
)

// Enum value maps for CRCStatus.
var (
	CRCStatus_name = map[int32]string{
		0: "MISSING",
		1: "OK",
		2: "FAIL",
	}
	CRCStatus_value = map[string]int32{
		"MISSING": 0,
		"OK":      1,
		"FAIL":    2,
	}
)

func (x CRCStatus) Enum() *CRCStatus {
	p := new(CRCStatus)
	*p = x
	return p
}

func (x CRCStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CRCStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_analytics_proto_enumTypes[0].Descriptor()
}

func (CRCStatus) Type() protoreflect.EnumType {
	return &file_analytics_proto_enumTypes[0]
}

func (x CRCStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CRCStatus.Descriptor instead.
func (CRCStatus) EnumDescriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{0}
}

type Modulation int32

const (
	Modulation_LORA Modulation = 0
	Modulation_FSK  Modulation = 1
)

// Enum value maps for Modulation.
var (
	Modulation_name = map[int32]string{
		0: "LORA",
		1: "FSK",
	}
	Modulation_value = map[string]int32{
		"LORA": 0,
		"FSK":  1,
	}
)

func (x Modulation) Enum() *Modulation {
	p := new(Modulation)
	*p = x
	return p
}

func (x Modulation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Modulation) Descriptor() protoreflect.EnumDescriptor {
	return file_analytics_proto_enumTypes[1].Descriptor()
}

func (Modulation) Type() protoreflect.EnumType {
	return &file_analytics_proto_enumTypes[1]
}

func (x Modulation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Modulation.Descriptor instead.
func (Modulation) EnumDescriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{1}
}

type LoRaCodingRate int32

const (
	LoRaCodingRate_CR_OFF     LoRaCodingRate = 0
	LoRaCodingRate_CR_UNKNOWN LoRaCodingRate = 1
	LoRaCodingRate_CR_4_5     LoRaCodingRate = 2
	LoRaCodingRate_CR_4_6     LoRaCodingRate = 3
	LoRaCodingRate_CR_4_7     LoRaCodingRate = 4
	LoRaCodingRate_CR_4_8     LoRaCodingRate = 5
	LoRaCodingRate_CR_4_9     LoRaCodingRate = 6
	LoRaCodingRate_CR_4_10    LoRaCodingRate = 7
	LoRaCodingRate_CR_4_11    LoRaCodingRate = 8
	LoRaCodingRate_CR_4_12    LoRaCodingRate = 9
	LoRaCodingRate_CR_4_13    LoRaCodingRate = 10
	LoRaCodingRate_CR_4_14    LoRaCodingRate = 11
	LoRaCodingRate_CR_4_15    LoRaCodingRate = 12
	LoRaCodingRate_CR_4_16    LoRaCodingRate = 13
)

// Enum value maps for LoRaCodingRate.
var (
	LoRaCodingRate_name = map[int32]string{
		0:  "CR_OFF",
		1:  "CR_UNKNOWN",
		2:  "CR_4_5",
		3:  "CR_4_6",
		4:  "CR_4_7",
		5:  "CR_4_8",
		6:  "CR_4_9",
		7:  "CR_4_10",
		8:  "CR_4_11",
		9:  "CR_4_12",
		10: "CR_4_13",
		11: "CR_4_14",
		12: "CR_4_15",
		13: "CR_4_16",
	}
	LoRaCodingRate_value = map[string]int32{
		"CR_OFF":     0,
		"CR_UNKNOWN": 1,
		"CR_4_5":     2,
		"CR_4_6":     3,
		"CR_4_7":     4,
		"CR_4_8":     5,
		"CR_4_9":     6,
		"CR_4_10":    7,
		"CR_4_11":    8,
		"CR_4_12":    9,
		"CR_4_13":    10,
		"CR_4_14":    11,
		"CR_4_15":    12,
		"CR_4_16":    13,
	}
)

func (x LoRaCodingRate) Enum() *LoRaCodingRate {
	p := new(LoRaCodingRate)
	*p = x
	return p
}

func (x LoRaCodingRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoRaCodingRate) Descriptor() protoreflect.EnumDescriptor {
	return file_analytics_proto_enumTypes[2].Descriptor()
}

func (LoRaCodingRate) Type() protoreflect.EnumType {
	return &file_analytics_proto_enumTypes[2]
}

func (x LoRaCodingRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoRaCodingRate.Descriptor instead.
func (LoRaCodingRate) EnumDescriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{2}
}

type LoRaSF int32

const (
	LoRaSF_SF_UNKNOWN LoRaSF = 0
	LoRaSF_SF12       LoRaSF = 1
	LoRaSF_SF11       LoRaSF = 2
	LoRaSF_SF10       LoRaSF = 3
	LoRaSF_SF9        LoRaSF = 4
	LoRaSF_SF8        LoRaSF = 5
	LoRaSF_SF7        LoRaSF = 6
)

// Enum value maps for LoRaSF.
var (
	LoRaSF_name = map[int32]string{
		0: "SF_UNKNOWN",
		1: "SF12",
		2: "SF11",
		3: "SF10",
		4: "SF9",
		5: "SF8",
		6: "SF7",
	}
	LoRaSF_value = map[string]int32{
		"SF_UNKNOWN": 0,
		"SF12":       1,
		"SF11":       2,
		"SF10":       3,
		"SF9":        4,
		"SF8":        5,
		"SF7":        6,
	}
)

func (x LoRaSF) Enum() *LoRaSF {
	p := new(LoRaSF)
	*p = x
	return p
}

func (x LoRaSF) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoRaSF) Descriptor() protoreflect.EnumDescriptor {
	return file_analytics_proto_enumTypes[3].Descriptor()
}

func (LoRaSF) Type() protoreflect.EnumType {
	return &file_analytics_proto_enumTypes[3]
}

func (x LoRaSF) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoRaSF.Descriptor instead.
func (LoRaSF) EnumDescriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{3}
}

type LoRaBW int32

const (
	LoRaBW_BW_UNKNOWN LoRaBW = 0
	LoRaBW_BW_125k    LoRaBW = 1
	LoRaBW_BW_500k    LoRaBW = 2
)

// Enum value maps for LoRaBW.
var (
	LoRaBW_name = map[int32]string{
		0: "BW_UNKNOWN",
		1: "BW_125k",
		2: "BW_500k",
	}
	LoRaBW_value = map[string]int32{
		"BW_UNKNOWN": 0,
		"BW_125k":    1,
		"BW_500k":    2,
	}
)

func (x LoRaBW) Enum() *LoRaBW {
	p := new(LoRaBW)
	*p = x
	return p
}

func (x LoRaBW) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoRaBW) Descriptor() protoreflect.EnumDescriptor {
	return file_analytics_proto_enumTypes[4].Descriptor()
}

func (LoRaBW) Type() protoreflect.EnumType {
	return &file_analytics_proto_enumTypes[4]
}

func (x LoRaBW) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoRaBW.Descriptor instead.
func (LoRaBW) EnumDescriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{4}
}

//*
// A bulk of analytics data to be sent to the erver
type AnalyticsMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uplinks   []*AnalyticsUplink   `protobuf:"bytes,1,rep,name=uplinks,proto3" json:"uplinks,omitempty"`
	Downlinks []*AnalyticsDownlink `protobuf:"bytes,2,rep,name=downlinks,proto3" json:"downlinks,omitempty"`
	Stats     []*AnalyticsStat     `protobuf:"bytes,3,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *AnalyticsMetrics) Reset() {
	*x = AnalyticsMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsMetrics) ProtoMessage() {}

func (x *AnalyticsMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsMetrics.ProtoReflect.Descriptor instead.
func (*AnalyticsMetrics) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyticsMetrics) GetUplinks() []*AnalyticsUplink {
	if x != nil {
		return x.Uplinks
	}
	return nil
}

func (x *AnalyticsMetrics) GetDownlinks() []*AnalyticsDownlink {
	if x != nil {
		return x.Downlinks
	}
	return nil
}

func (x *AnalyticsMetrics) GetStats() []*AnalyticsStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

//*
// Uplink Analytics Message
// (Sent from a mote)
type AnalyticsUplink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RxWallTime     int64          `protobuf:"varint,1,opt,name=rxWallTime,proto3" json:"rxWallTime,omitempty"`
	RxGpsTime      int64          `protobuf:"varint,2,opt,name=rxGpsTime,proto3" json:"rxGpsTime,omitempty"`
	RxFinishedTime int64          `protobuf:"varint,3,opt,name=rxFinishedTime,proto3" json:"rxFinishedTime,omitempty"`
	Frequency      float32        `protobuf:"fixed32,4,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Channel        uint32         `protobuf:"varint,5,opt,name=channel,proto3" json:"channel,omitempty"`
	RfChain        uint32         `protobuf:"varint,6,opt,name=rfChain,proto3" json:"rfChain,omitempty"`
	Crc            CRCStatus      `protobuf:"varint,7,opt,name=crc,proto3,enum=api.CRCStatus" json:"crc,omitempty"`
	Modulation     Modulation     `protobuf:"varint,8,opt,name=modulation,proto3,enum=api.Modulation" json:"modulation,omitempty"`
	CodingRate     LoRaCodingRate `protobuf:"varint,9,opt,name=codingRate,proto3,enum=api.LoRaCodingRate" json:"codingRate,omitempty"`
	// Types that are assignable to DataRate:
	//	*AnalyticsUplink_DataRateLoRa
	//	*AnalyticsUplink_DataRateFSK
	DataRate isAnalyticsUplink_DataRate `protobuf_oneof:"dataRate"`
	Rssi     float32                    `protobuf:"fixed32,12,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Lsnr     float32                    `protobuf:"fixed32,13,opt,name=lsnr,proto3" json:"lsnr,omitempty"`
	Size     uint32                     `protobuf:"varint,14,opt,name=size,proto3" json:"size,omitempty"`
	Fhdr     []byte                     `protobuf:"bytes,15,opt,name=fhdr,proto3" json:"fhdr,omitempty"`
}

func (x *AnalyticsUplink) Reset() {
	*x = AnalyticsUplink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsUplink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsUplink) ProtoMessage() {}

func (x *AnalyticsUplink) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsUplink.ProtoReflect.Descriptor instead.
func (*AnalyticsUplink) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{1}
}

func (x *AnalyticsUplink) GetRxWallTime() int64 {
	if x != nil {
		return x.RxWallTime
	}
	return 0
}

func (x *AnalyticsUplink) GetRxGpsTime() int64 {
	if x != nil {
		return x.RxGpsTime
	}
	return 0
}

func (x *AnalyticsUplink) GetRxFinishedTime() int64 {
	if x != nil {
		return x.RxFinishedTime
	}
	return 0
}

func (x *AnalyticsUplink) GetFrequency() float32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *AnalyticsUplink) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *AnalyticsUplink) GetRfChain() uint32 {
	if x != nil {
		return x.RfChain
	}
	return 0
}

func (x *AnalyticsUplink) GetCrc() CRCStatus {
	if x != nil {
		return x.Crc
	}
	return CRCStatus_MISSING
}

func (x *AnalyticsUplink) GetModulation() Modulation {
	if x != nil {
		return x.Modulation
	}
	return Modulation_LORA
}

func (x *AnalyticsUplink) GetCodingRate() LoRaCodingRate {
	if x != nil {
		return x.CodingRate
	}
	return LoRaCodingRate_CR_OFF
}

func (m *AnalyticsUplink) GetDataRate() isAnalyticsUplink_DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

func (x *AnalyticsUplink) GetDataRateLoRa() *LoRaDataRate {
	if x, ok := x.GetDataRate().(*AnalyticsUplink_DataRateLoRa); ok {
		return x.DataRateLoRa
	}
	return nil
}

func (x *AnalyticsUplink) GetDataRateFSK() uint32 {
	if x, ok := x.GetDataRate().(*AnalyticsUplink_DataRateFSK); ok {
		return x.DataRateFSK
	}
	return 0
}

func (x *AnalyticsUplink) GetRssi() float32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *AnalyticsUplink) GetLsnr() float32 {
	if x != nil {
		return x.Lsnr
	}
	return 0
}

func (x *AnalyticsUplink) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AnalyticsUplink) GetFhdr() []byte {
	if x != nil {
		return x.Fhdr
	}
	return nil
}

type isAnalyticsUplink_DataRate interface {
	isAnalyticsUplink_DataRate()
}

type AnalyticsUplink_DataRateLoRa struct {
	DataRateLoRa *LoRaDataRate `protobuf:"bytes,10,opt,name=dataRateLoRa,proto3,oneof"`
}

type AnalyticsUplink_DataRateFSK struct {
	DataRateFSK uint32 `protobuf:"varint,11,opt,name=dataRateFSK,proto3,oneof"`
}

func (*AnalyticsUplink_DataRateLoRa) isAnalyticsUplink_DataRate() {}

func (*AnalyticsUplink_DataRateFSK) isAnalyticsUplink_DataRate() {}

//*
// Downlink Analytics Message
// (Received from the server)
type AnalyticsDownlink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxTime     int64          `protobuf:"varint,1,opt,name=txTime,proto3" json:"txTime,omitempty"`
	TxGpsTime  int64          `protobuf:"varint,2,opt,name=txGpsTime,proto3" json:"txGpsTime,omitempty"`
	FskFreqDev float32        `protobuf:"fixed32,3,opt,name=fskFreqDev,proto3" json:"fskFreqDev,omitempty"`
	Frequency  float32        `protobuf:"fixed32,4,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Channel    uint32         `protobuf:"varint,5,opt,name=channel,proto3" json:"channel,omitempty"`
	RfChain    uint32         `protobuf:"varint,6,opt,name=rfChain,proto3" json:"rfChain,omitempty"`
	Power      float32        `protobuf:"fixed32,7,opt,name=power,proto3" json:"power,omitempty"`
	Modulation Modulation     `protobuf:"varint,8,opt,name=modulation,proto3,enum=api.Modulation" json:"modulation,omitempty"`
	CodingRate LoRaCodingRate `protobuf:"varint,9,opt,name=codingRate,proto3,enum=api.LoRaCodingRate" json:"codingRate,omitempty"`
	// Types that are assignable to DataRate:
	//	*AnalyticsDownlink_DataRateLoRa
	//	*AnalyticsDownlink_DataRateFSK
	DataRate       isAnalyticsDownlink_DataRate `protobuf_oneof:"dataRate"`
	InvertPolarity bool                         `protobuf:"varint,12,opt,name=invertPolarity,proto3" json:"invertPolarity,omitempty"`
	Immediately    bool                         `protobuf:"varint,13,opt,name=immediately,proto3" json:"immediately,omitempty"`
	RfPreamble     uint32                       `protobuf:"varint,14,opt,name=rfPreamble,proto3" json:"rfPreamble,omitempty"`
	Size           uint32                       `protobuf:"varint,15,opt,name=size,proto3" json:"size,omitempty"`
	Fhdr           []byte                       `protobuf:"bytes,16,opt,name=fhdr,proto3" json:"fhdr,omitempty"`
	NoCrc          bool                         `protobuf:"varint,17,opt,name=noCrc,proto3" json:"noCrc,omitempty"`
}

func (x *AnalyticsDownlink) Reset() {
	*x = AnalyticsDownlink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsDownlink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsDownlink) ProtoMessage() {}

func (x *AnalyticsDownlink) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsDownlink.ProtoReflect.Descriptor instead.
func (*AnalyticsDownlink) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyticsDownlink) GetTxTime() int64 {
	if x != nil {
		return x.TxTime
	}
	return 0
}

func (x *AnalyticsDownlink) GetTxGpsTime() int64 {
	if x != nil {
		return x.TxGpsTime
	}
	return 0
}

func (x *AnalyticsDownlink) GetFskFreqDev() float32 {
	if x != nil {
		return x.FskFreqDev
	}
	return 0
}

func (x *AnalyticsDownlink) GetFrequency() float32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *AnalyticsDownlink) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *AnalyticsDownlink) GetRfChain() uint32 {
	if x != nil {
		return x.RfChain
	}
	return 0
}

func (x *AnalyticsDownlink) GetPower() float32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *AnalyticsDownlink) GetModulation() Modulation {
	if x != nil {
		return x.Modulation
	}
	return Modulation_LORA
}

func (x *AnalyticsDownlink) GetCodingRate() LoRaCodingRate {
	if x != nil {
		return x.CodingRate
	}
	return LoRaCodingRate_CR_OFF
}

func (m *AnalyticsDownlink) GetDataRate() isAnalyticsDownlink_DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

func (x *AnalyticsDownlink) GetDataRateLoRa() *LoRaDataRate {
	if x, ok := x.GetDataRate().(*AnalyticsDownlink_DataRateLoRa); ok {
		return x.DataRateLoRa
	}
	return nil
}

func (x *AnalyticsDownlink) GetDataRateFSK() uint32 {
	if x, ok := x.GetDataRate().(*AnalyticsDownlink_DataRateFSK); ok {
		return x.DataRateFSK
	}
	return 0
}

func (x *AnalyticsDownlink) GetInvertPolarity() bool {
	if x != nil {
		return x.InvertPolarity
	}
	return false
}

func (x *AnalyticsDownlink) GetImmediately() bool {
	if x != nil {
		return x.Immediately
	}
	return false
}

func (x *AnalyticsDownlink) GetRfPreamble() uint32 {
	if x != nil {
		return x.RfPreamble
	}
	return 0
}

func (x *AnalyticsDownlink) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AnalyticsDownlink) GetFhdr() []byte {
	if x != nil {
		return x.Fhdr
	}
	return nil
}

func (x *AnalyticsDownlink) GetNoCrc() bool {
	if x != nil {
		return x.NoCrc
	}
	return false
}

type isAnalyticsDownlink_DataRate interface {
	isAnalyticsDownlink_DataRate()
}

type AnalyticsDownlink_DataRateLoRa struct {
	DataRateLoRa *LoRaDataRate `protobuf:"bytes,10,opt,name=dataRateLoRa,proto3,oneof"`
}

type AnalyticsDownlink_DataRateFSK struct {
	DataRateFSK uint32 `protobuf:"varint,11,opt,name=dataRateFSK,proto3,oneof"`
}

func (*AnalyticsDownlink_DataRateLoRa) isAnalyticsDownlink_DataRate() {}

func (*AnalyticsDownlink_DataRateFSK) isAnalyticsDownlink_DataRate() {}

//*
// Analytics Status Message
// (Sent from the gateway)
type AnalyticsStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GwTime            int64   `protobuf:"varint,1,opt,name=gwTime,proto3" json:"gwTime,omitempty"`
	GwLatitude        float32 `protobuf:"fixed32,2,opt,name=gwLatitude,proto3" json:"gwLatitude,omitempty"`
	GwLongitude       float32 `protobuf:"fixed32,3,opt,name=gwLongitude,proto3" json:"gwLongitude,omitempty"`
	GwAltitude        float32 `protobuf:"fixed32,4,opt,name=gwAltitude,proto3" json:"gwAltitude,omitempty"`
	RxPackets         uint32  `protobuf:"varint,5,opt,name=rxPackets,proto3" json:"rxPackets,omitempty"`
	RxWithValidPhyCRC uint32  `protobuf:"varint,6,opt,name=rxWithValidPhyCRC,proto3" json:"rxWithValidPhyCRC,omitempty"`
	RxForwarded       uint32  `protobuf:"varint,7,opt,name=rxForwarded,proto3" json:"rxForwarded,omitempty"`
	RxAckr            float32 `protobuf:"fixed32,8,opt,name=rxAckr,proto3" json:"rxAckr,omitempty"`
	TxReceived        uint32  `protobuf:"varint,9,opt,name=txReceived,proto3" json:"txReceived,omitempty"`
	TxEmitted         uint32  `protobuf:"varint,10,opt,name=txEmitted,proto3" json:"txEmitted,omitempty"`
}

func (x *AnalyticsStat) Reset() {
	*x = AnalyticsStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsStat) ProtoMessage() {}

func (x *AnalyticsStat) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsStat.ProtoReflect.Descriptor instead.
func (*AnalyticsStat) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{3}
}

func (x *AnalyticsStat) GetGwTime() int64 {
	if x != nil {
		return x.GwTime
	}
	return 0
}

func (x *AnalyticsStat) GetGwLatitude() float32 {
	if x != nil {
		return x.GwLatitude
	}
	return 0
}

func (x *AnalyticsStat) GetGwLongitude() float32 {
	if x != nil {
		return x.GwLongitude
	}
	return 0
}

func (x *AnalyticsStat) GetGwAltitude() float32 {
	if x != nil {
		return x.GwAltitude
	}
	return 0
}

func (x *AnalyticsStat) GetRxPackets() uint32 {
	if x != nil {
		return x.RxPackets
	}
	return 0
}

func (x *AnalyticsStat) GetRxWithValidPhyCRC() uint32 {
	if x != nil {
		return x.RxWithValidPhyCRC
	}
	return 0
}

func (x *AnalyticsStat) GetRxForwarded() uint32 {
	if x != nil {
		return x.RxForwarded
	}
	return 0
}

func (x *AnalyticsStat) GetRxAckr() float32 {
	if x != nil {
		return x.RxAckr
	}
	return 0
}

func (x *AnalyticsStat) GetTxReceived() uint32 {
	if x != nil {
		return x.TxReceived
	}
	return 0
}

func (x *AnalyticsStat) GetTxEmitted() uint32 {
	if x != nil {
		return x.TxEmitted
	}
	return 0
}

type LoRaDataRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpreadingFactor LoRaSF `protobuf:"varint,1,opt,name=spreadingFactor,proto3,enum=api.LoRaSF" json:"spreadingFactor,omitempty"`
	Bandwidth       LoRaBW `protobuf:"varint,2,opt,name=bandwidth,proto3,enum=api.LoRaBW" json:"bandwidth,omitempty"`
}

func (x *LoRaDataRate) Reset() {
	*x = LoRaDataRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoRaDataRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoRaDataRate) ProtoMessage() {}

func (x *LoRaDataRate) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoRaDataRate.ProtoReflect.Descriptor instead.
func (*LoRaDataRate) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{4}
}

func (x *LoRaDataRate) GetSpreadingFactor() LoRaSF {
	if x != nil {
		return x.SpreadingFactor
	}
	return LoRaSF_SF_UNKNOWN
}

func (x *LoRaDataRate) GetBandwidth() LoRaBW {
	if x != nil {
		return x.Bandwidth
	}
	return LoRaBW_BW_UNKNOWN
}

var File_analytics_proto protoreflect.FileDescriptor

var file_analytics_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x55, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x52, 0x07, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x8a, 0x04, 0x0a, 0x0f,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x78, 0x57, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x78, 0x57, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x78, 0x47, 0x70, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x78, 0x47, 0x70, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x78, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x78, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x52, 0x43, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x03, 0x63, 0x72, 0x63, 0x12, 0x2f, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x52, 0x61, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x37, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x52, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x52, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x52, 0x61, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x61, 0x74, 0x65, 0x46, 0x53, 0x4b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x46, 0x53, 0x4b, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x73, 0x73, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x73, 0x6e, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x6c, 0x73, 0x6e, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x68, 0x64, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x68, 0x64, 0x72, 0x42, 0x0a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x22, 0xc8, 0x04, 0x0a, 0x11, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x74, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x78, 0x47, 0x70, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x78, 0x47, 0x70, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x73, 0x6b, 0x46, 0x72, 0x65, 0x71, 0x44,
	0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x73, 0x6b, 0x46, 0x72, 0x65,
	0x71, 0x44, 0x65, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72,
	0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x0a, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x52, 0x61, 0x43, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x52, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x6f, 0x52, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x52, 0x61, 0x12, 0x22, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x46, 0x53, 0x4b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x46, 0x53, 0x4b, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x50,
	0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6d, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x66, 0x50,
	0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x66, 0x50, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x68, 0x64, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x68, 0x64,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x43, 0x72, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x6e, 0x6f, 0x43, 0x72, 0x63, 0x42, 0x0a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x74, 0x65, 0x22, 0xcd, 0x02, 0x0a, 0x0d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x77, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x67, 0x77, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x67, 0x77, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x67, 0x77, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x77, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x67, 0x77, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x72, 0x78, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x68, 0x79, 0x43,
	0x52, 0x43, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x78, 0x57, 0x69, 0x74, 0x68,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x68, 0x79, 0x43, 0x52, 0x43, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x78, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x78, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x78, 0x41, 0x63, 0x6b, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72,
	0x78, 0x41, 0x63, 0x6b, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x78, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x78, 0x45, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x78, 0x45, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x22, 0x70, 0x0a, 0x0c, 0x4c, 0x6f, 0x52, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x52, 0x61, 0x53, 0x46, 0x52, 0x0f, 0x73, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x52, 0x61, 0x42, 0x57, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x2a, 0x2a, 0x0a, 0x09, 0x43, 0x52, 0x43, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x02, 0x2a, 0x1f, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x52, 0x41, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x53, 0x4b,
	0x10, 0x01, 0x2a, 0xc3, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x52, 0x61, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x5f, 0x34, 0x5f, 0x35, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x52, 0x5f, 0x34, 0x5f, 0x36, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x5f,
	0x34, 0x5f, 0x37, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x5f, 0x34, 0x5f, 0x38, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x5f, 0x34, 0x5f, 0x39, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x52, 0x5f, 0x34, 0x5f, 0x31, 0x30, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52,
	0x5f, 0x34, 0x5f, 0x31, 0x31, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x5f, 0x34, 0x5f,
	0x31, 0x32, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x5f, 0x34, 0x5f, 0x31, 0x33, 0x10,
	0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x5f, 0x34, 0x5f, 0x31, 0x34, 0x10, 0x0b, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x52, 0x5f, 0x34, 0x5f, 0x31, 0x35, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x52, 0x5f, 0x34, 0x5f, 0x31, 0x36, 0x10, 0x0d, 0x2a, 0x51, 0x0a, 0x06, 0x4c, 0x6f, 0x52, 0x61,
	0x53, 0x46, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x46, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x46, 0x31, 0x32, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x46, 0x31, 0x31, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x46, 0x31, 0x30, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x46, 0x39, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x46, 0x38,
	0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x46, 0x37, 0x10, 0x06, 0x2a, 0x32, 0x0a, 0x06, 0x4c,
	0x6f, 0x52, 0x61, 0x42, 0x57, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x57, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x57, 0x5f, 0x31, 0x32, 0x35, 0x6b,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x57, 0x5f, 0x35, 0x30, 0x30, 0x6b, 0x10, 0x02, 0x42,
	0x21, 0x5a, 0x1f, 0x6b, 0x75, 0x64, 0x7a, 0x75, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_analytics_proto_rawDescOnce sync.Once
	file_analytics_proto_rawDescData = file_analytics_proto_rawDesc
)

func file_analytics_proto_rawDescGZIP() []byte {
	file_analytics_proto_rawDescOnce.Do(func() {
		file_analytics_proto_rawDescData = protoimpl.X.CompressGZIP(file_analytics_proto_rawDescData)
	})
	return file_analytics_proto_rawDescData
}

var file_analytics_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_analytics_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_analytics_proto_goTypes = []interface{}{
	(CRCStatus)(0),            // 0: api.CRCStatus
	(Modulation)(0),           // 1: api.Modulation
	(LoRaCodingRate)(0),       // 2: api.LoRaCodingRate
	(LoRaSF)(0),               // 3: api.LoRaSF
	(LoRaBW)(0),               // 4: api.LoRaBW
	(*AnalyticsMetrics)(nil),  // 5: api.AnalyticsMetrics
	(*AnalyticsUplink)(nil),   // 6: api.AnalyticsUplink
	(*AnalyticsDownlink)(nil), // 7: api.AnalyticsDownlink
	(*AnalyticsStat)(nil),     // 8: api.AnalyticsStat
	(*LoRaDataRate)(nil),      // 9: api.LoRaDataRate
}
var file_analytics_proto_depIdxs = []int32{
	6,  // 0: api.AnalyticsMetrics.uplinks:type_name -> api.AnalyticsUplink
	7,  // 1: api.AnalyticsMetrics.downlinks:type_name -> api.AnalyticsDownlink
	8,  // 2: api.AnalyticsMetrics.stats:type_name -> api.AnalyticsStat
	0,  // 3: api.AnalyticsUplink.crc:type_name -> api.CRCStatus
	1,  // 4: api.AnalyticsUplink.modulation:type_name -> api.Modulation
	2,  // 5: api.AnalyticsUplink.codingRate:type_name -> api.LoRaCodingRate
	9,  // 6: api.AnalyticsUplink.dataRateLoRa:type_name -> api.LoRaDataRate
	1,  // 7: api.AnalyticsDownlink.modulation:type_name -> api.Modulation
	2,  // 8: api.AnalyticsDownlink.codingRate:type_name -> api.LoRaCodingRate
	9,  // 9: api.AnalyticsDownlink.dataRateLoRa:type_name -> api.LoRaDataRate
	3,  // 10: api.LoRaDataRate.spreadingFactor:type_name -> api.LoRaSF
	4,  // 11: api.LoRaDataRate.bandwidth:type_name -> api.LoRaBW
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_analytics_proto_init() }
func file_analytics_proto_init() {
	if File_analytics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_analytics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsUplink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsDownlink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoRaDataRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_analytics_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AnalyticsUplink_DataRateLoRa)(nil),
		(*AnalyticsUplink_DataRateFSK)(nil),
	}
	file_analytics_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AnalyticsDownlink_DataRateLoRa)(nil),
		(*AnalyticsDownlink_DataRateFSK)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_analytics_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_analytics_proto_goTypes,
		DependencyIndexes: file_analytics_proto_depIdxs,
		EnumInfos:         file_analytics_proto_enumTypes,
		MessageInfos:      file_analytics_proto_msgTypes,
	}.Build()
	File_analytics_proto = out.File
	file_analytics_proto_rawDesc = nil
	file_analytics_proto_goTypes = nil
	file_analytics_proto_depIdxs = nil
}
